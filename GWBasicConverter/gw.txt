tokens = {
  0x81: 'END',
  0x82: 'FOR',
  0x83: 'NEXT',
  0x84: 'DATA',
  0x85: 'INPUT',
  0x86: 'DIM',
  0x87: 'READ',
  0x88: 'LET',
  0x89: 'GOTO',
  0x8A: 'RUN',
  0x8B: 'IF',
  0x8C: 'RESTORE',
  0x8D: 'GOSUB',
  0x8E: 'RETURN',
  0x8F: 'REM',
  0x90: 'STOP',
  0x91: 'PRINT',
  0x92: 'CLEAR',
  0x93: 'LIST',
  0x94: 'NEW',
  0x95: 'ON',
  0x96: 'WAIT',
  0x97: 'DEF',
  0x98: 'POKE',
  0x99: 'CONT',
  0x9A: '(Undefined)',
  0x9B: '(Undefined)',
  0x9C: 'OUT',
  0x9D: 'LPRINT',
  0x9E: 'LLIST',
  0x9F: '(Undefined)',
  0xA0: 'WIDTH',
  0xA1: 'ELSE',
  0xA2: 'TRON',
  0xA3: 'TROFF',
  0xA4: 'SWAP',
  0xA5: 'ERASE',
  0xA6: 'EDIT',
  0xA7: 'ERROR',
  0xA8: 'RESUME',
  0xA9: 'DELETE',
  0xAA: 'AUTO',
  0xAB: 'RENUM',
  0xAC: 'DEFSTR',
  0xAD: 'DEFINT',
  0xAE: 'DEFSNG',
  0xAF: 'DEFDBL',
  0xB0: 'LINE',
  0xB1: 'WHILE',
  0xB2: 'WEND',
  0xB3: 'CALL',
  0xB4: '(Undefined)',
  0xB5: '(Undefined)',
  0xB6: '(Undefined)',
  0xB7: 'WRITE',
  0xB8: 'OPTION',
  0xB9: 'RANDOMIZE',
  0xBA: 'OPEN',
  0xBB: 'CLOSE',
  0xBC: 'LOAD',
  0xBD: 'MERGE',
  0xBE: 'SAVE',
  0xBF: 'COLOR',
  0xC0: 'CLS',
  0xC1: 'MOTOR',
  0xC2: 'BSAVE',
  0xC3: 'BLOAD',
  0xC4: 'SOUND',
  0xC5: 'BEEP',
  0xC6: 'PSET',
  0xC7: 'PRESET',
  0xC8: 'SCREEN',
  0xC9: 'KEY',
  0xCA: 'LOCATE',
  0xCB: '(Undefined)',
  0xCC: 'TO',
  0xCD: 'THEN',
  0xCE: 'TAB(',
  0xCF: 'STEP',
  0xD0: 'USR',
  0xD1: 'FN',
  0xD2: 'SPC(',
  0xD3: 'NOT',
  0xD4: 'ERL',
  0xD5: 'ERR',
  0xD6: 'STRING$',
  0xD7: 'USING',
  0xD8: 'INSTR',
  0xD9: "'",
  0xDA: 'VARPTR',
  0xDB: 'CSRLIN',
  0xDC: 'POINT',
  0xDD: 'OFF',
  0xDE: 'INKEY$',
  0xDF: '(Undefined)',
  0xE0: '(Undefined)',
  0xE1: '(Undefined)',
  0xE2: '(Undefined)',
  0xE3: '(Undefined)',
  0xE4: '(Undefined)',
  0xE5: '(Undefined)',
  0xE6: '>',
  0xE7: '=',
  0xE8: '<',
  0xE9: '+',
  0xEA: '-',
  0xEB: '*',
  0xEC: '/',
  0xED: '^',
  0xEE: 'AND',
  0xEF: 'OR',
  0xF0: 'XOR',
  0xF1: 'EQV',
  0xF2: 'IMP',
  0xF3: 'MOD',
  0xF4: '\\',
  0xF5: '(Undefined)',
  0xF6: '(Undefined)',
  0xF7: '(Undefined)',
  0xF8: '(Undefined)',
  0xF9: '(Undefined)',
  0xFA: '(Undefined)',
  0xFB: '(Undefined)',
  0xFC: '(Undefined)',

  0xFD81: 'CVI',
  0xFD82: 'CVS',
  0xFD83: 'CVD',
  0xFD84: 'MKI$',
  0xFD85: 'MKS$',
  0xFD86: 'MKD$',
  0xFD8B: 'EXTERR',
  0xFE81: 'FILES',
  0xFE82: 'FIELD',
  0xFE83: 'SYSTEM',
  0xFE84: 'NAME',
  0xFE85: 'LSET',
  0xFE86: 'RSET',
  0xFE87: 'KILL',
  0xFE88: 'PUT',
  0xFE89: 'GET',
  0xFE8A: 'RESET',
  0xFE8B: 'COMMON',
  0xFE8C: 'CHAIN',
  0xFE8D: 'DATE$',
  0xFE8E: 'TIME$',
  0xFE8F: 'PAINT',
  0xFE90: 'COM',
  0xFE91: 'CIRCLE',
  0xFE92: 'DRAW',
  0xFE93: 'PLAY',
  0xFE94: 'TIMER',
  0xFE95: 'ERDEV',
  0xFE96: 'IOCTL',
  0xFE97: 'CHDIR',
  0xFE98: 'MKDIR',
  0xFE99: 'RMDIR',
  0xFE9A: 'SHELL',
  0xFE9B: 'ENVIRON',
  0xFE9C: 'VIEW',
  0xFE9D: 'WINDOW',
  0xFE9E: 'PMAP',
  0xFE9F: 'PALETTE',
  0xFEA0: 'LCOPY',
  0xFEA1: 'CALLS',
  0xFEA4: 'NOISE',  #   (PCjr only) DEBUG   (Sperry PC only)',
  0xFEA5: 'PCOPY',
  0xFEA6: 'TERM',
  0xFEA7: 'LOCK',
  0xFEA8: 'UNLOCK',
  0xFF81: 'LEFT$',
  0xFF82: 'RIGHT$',
  0xFF83: 'MID$',
  0xFF84: 'SGN',
  0xFF85: 'INT',
  0xFF86: 'ABS',
  0xFF87: 'SQR',
  0xFF88: 'RND',
  0xFF89: 'SIN',
  0xFF8A: 'LOG',
  0xFF8B: 'EXP',
  0xFF8C: 'COS',
  0xFF8D: 'TAN',
  0xFF8E: 'ATN',
  0xFF8F: 'FRE',
  0xFF90: 'INP',
  0xFF91: 'POS',
  0xFF92: 'LEN',
  0xFF93: 'STR$',
  0xFF94: 'VAL',
  0xFF95: 'ASC',
  0xFF96: 'CHR$',
  0xFF97: 'PEEK',
  0xFF98: 'SPACE$',
  0xFF99: 'OCT$',
  0xFF9A: 'HEX$',
  0xFF9B: 'LPOS',
  0xFF9C: 'CINT',
  0xFF9D: 'CSNG',
  0xFF9E: 'CDBL',
  0xFF9F: 'FIX',
  0xFFA0: 'PEN',
  0xFFA1: 'STICK',
  0xFFA2: 'STRIG',
  0xFFA3: 'EOF',
  0xFFA4: 'LOC',
  0xFFA5: 'LOF'
}

# class to load GW-BASIC programs
import re
import math
from gwbasic_tokens import tokens

class GWBasicLine:
    """class representing a single line of a GW-BASIC program"""
    def __init__(self, data: bytes, encoding: str, lineStart: int):
        self._data = data
        self._encoding = encoding
        self._lineStart = lineStart
        self._lineNum = 0
        self._lineBuffer = []
        self.isEOF = False
        self._pos = lineStart
    
    # Float binary format: http://www.chebucto.ns.ca/~af380/GW-BASIC-tokens.html
    # Rounding and postfixes: https://www-user.tu-chemnitz.de/~heha/viewchm.php/hs/gwBasic.chm/Chapter6.html
    def _parse_float32(self, index: int) -> str:
        if self._data[index + 3] == 0:
            return "0"

        exp = self._data[index + 3] - 152  #  -152 = -128 + -24 (24 because the significand is behind a decimal dot)
        mantissa = ((self._data[index + 2] | 0x80) << 16) | (self._data[index + 1] << 8) | self._data[index]

        if self._data[index + 2] & 0x80:
            number = -math.ldexp(mantissa, exp)
        else:
            number = math.ldexp(mantissa, exp)

        # Must round to 6 significant figures (from 7) when displaying
        numberStr = self._canonize_number('%s' % float('%.6g' % number))

        # If nothing indicates that this is a float, then add the "!" postfix
        if not ("." in numberStr or "E" in numberStr):
            numberStr += "!"

        return numberStr

    # Double binary format: http://www.chebucto.ns.ca/~af380/GW-BASIC-tokens.html
    # Rounding and postfixes: https://www-user.tu-chemnitz.de/~heha/viewchm.php/hs/gwBasic.chm/Chapter6.html
    def _parse_float64(self, index: int) -> str:
        if self._data[index + 7] == 0:
            return "0"

        exp = self._data[index + 7] - 184  #  -184 = -128 + -56 (56 because the significand is behind a decimal dot)
        mantissa = ((self._data[index + 6] | 0x80) << 48) | (self._data[index + 5] << 40) | (self._data[index + 4] << 32)  \
            | (self._data[index + 3] << 24) | (self._data[index + 2] << 16) | (self._data[index + 1] << 8) | self._data[index]
        
        # We must always output a positive number for doubles,
        # because a token for '-' is already added before the negative ones.
        number = math.ldexp(mantissa, exp)

        # Must round to 16 significant figures (from 17) when displaying
        # The exponent sign for doubles is 'D' instead of 'E'
        numberStr = self._canonize_number('%s' % float('%.16g' % number)).replace('E', 'D')
        
        # Doubles only get their postfix '#' when they don't contain the exponentiation letter 'D'
        if "D" not in numberStr:
            numberStr += "#"

        return numberStr

    # For example 8.0 => 8 | 0.21 => .21 | -0.35 => -.35 | 1.7e-5 => 1.7E-5
    def _canonize_number(self, num: str) -> str:
        """Make the string representation of numbers follow the GW-Basic standard"""
        num = re.sub(r'^([\-])*0\.', r'\1.', num)
        num = re.sub(r'\.0$', '', num)
        return num.upper()  # Make the "e" exponent upper-case "E"

    def get_consumed_byte_count(self) -> int:
        return self._pos - self._lineStart

    def _check_boundary(self, required: int):
        if len(self._data) - self._pos - 1 < required:
            if self._lineNum > 0:
                raise Exception("Unexpected end of file after line %d" % self._lineNum)
            else:
                raise Exception("Unexpected end of file at byte position %s" % hex(self._pos))

    def parse(self):
        """Forms a new line from the first line contained in the bytestream."""

        self._check_boundary(2)

        # first two bytes are address of next line. Mostly irrelevant, but if
        # they're both zero, this is the end of the program.
        if self._data[self._pos] == 0 and self._data[self._pos + 1] == 0:
            self.isEOF = True
            return
        
        self._pos += 2
        self._check_boundary(2)

        # next two bytes are the line number
        self._lineNum = (self._data[self._pos + 1] << 8) | self._data[self._pos]
        self._pos += 2

        # States that show whether we are inside a REM (comment)
        # statement or inside quotes.
        insideRem = False
        insideQuotes = False

        while self._data[self._pos] != 0:
            self._check_boundary(1)
            code = self._data[self._pos]

            if code == 0x22 and not insideRem:  # Quote starts or ends
                # There was no quote escaping. You had to use CHR$() to
                #   output a quote character.
                insideQuotes = not insideQuotes
                self._lineBuffer.append('"')
                self._pos += 1
            elif code == 0x3a and not (insideQuotes or insideRem) and (len(self._data) - self._pos - 1 > 2) \
                and self._data[self._pos + 1] == 0x8f and self._data[self._pos + 2] == 0xd9:
                    # REM block starts
                    # A single quote is an alias for a REM instruction
                    # It is stored with 3 bytes: 0x3a8fd9
                    insideRem = True    # a REM block never ends (inside a line)
                    self._lineBuffer.append("'")
                    self._pos += 3
            elif insideQuotes or insideRem or (code >= 0x20 and code <= 0x7e):
                # Decode the custom texts using the specified code page
                codeByte = code.to_bytes(1, byteorder='little', signed=False)
                self._lineBuffer.append(codeByte.decode(self._encoding))
                self._pos += 1
            elif code == 0x8f:     # REM block starts
                insideRem = True    # a REM block never ends (inside a line)
                self._lineBuffer.append('REM')
                self._pos += 1
            elif code == 0x0b:    # octal constant
                # signed, but that's not visible in octal representation
                self._check_boundary(2)
                value = (self._data[self._pos + 2] << 8) | self._data[self._pos + 1]
                numerals = []

                while value > 0:
                    numerals.append(str(value & 0x07))
                    value = value >> 3

                if len(numerals) < 1:
                    numerals.append("0")

                numerals.reverse()
                self._lineBuffer.append('&O' + "".join(numerals))
                self._pos += 3
            elif code == 0x0c:    # hex constant
                # signed, but that's not visible in hexa representation
                self._check_boundary(2)
                val = hex(self._data[self._pos + 2] << 8 | self._data[self._pos + 1]).replace('0x', '&H')
                self._lineBuffer.append(val.upper())
                self._pos += 3
            elif code == 0x0d:    # line pointer (unsigned)
                raise ValueError("line pointer (0x0d) shouldn't occur in saved program.")
            elif code == 0x0e:    # line number (unsigned)
                self._check_boundary(2)
                self._lineBuffer.append((self._data[self._pos + 2] << 8) | self._data[self._pos + 1])
                self._pos += 3
            elif code == 0x0f:    # one byte constant
                self._lineBuffer.append(self._data[self._pos + 1])
                self._pos += 2
            elif code == 0x10:    # Flags constant (unused)
                raise ValueError("unexpected 0x10 token")
            elif code >= 0x11 and code <= 0x1b:
                # Numbers from 0 to 10 have their own tokens
                self._lineBuffer.append(code - 0x11)
                self._pos += 1
            elif code == 0x1c:    # two byte integer constant (signed)
                self._check_boundary(2)
                val = ((self._data[self._pos + 2] & 0x7FFF) << 8) | self._data[self._pos + 1]
                if self._data[self._pos + 2] & 0x8000:
                    self._lineBuffer.append(-val)
                else:
                    self._lineBuffer.append(val)
                self._pos += 3
            elif code == 0x1d:    # four byte floating point constant
                self._check_boundary(4)
                self._lineBuffer.append(self._parse_float32(self._pos + 1))
                self._pos += 5
            elif code == 0x1e:    # unused
                raise ValueError("unexpected 0x1e token")
            elif code == 0x1f:    # eight byte double value
                self._check_boundary(8)
                self._lineBuffer.append(self._parse_float64(self._pos + 1))
                self._pos += 9
            elif code in tokens:
                # 1-byte tokens
                self._lineBuffer.append(tokens[code])
                self._pos += 1
            elif ((code << 8) | self._data[self._pos + 1]) in tokens:
                # 2-byte tokens
                # The boundary for that +1 is already checked at the beginning of the loop.
                self._lineBuffer.append(tokens[(code << 8) | self._data[self._pos + 1]])
                self._pos += 2
            else:
                raise ValueError("unexpected token: %d" % code)

        self._pos += 1    # consume the null byte

    def __str__(self):
        return "%5d %s" % (
            self._lineNum, ''.join([str(x) for x in self._lineBuffer]))


class GWBasic:
    """Class representing a gw-basic program"""

    def __init__(self, data: bytes, encoding: str):
        self._data = data
        self._encoding = encoding
        self._lines = []

        if data[0] != 0xff:
            raise ValueError("Expected 0xff as first character")

    def parse(self):
        # Parse the binary data line by line
        pos = 1
        
        # Don't test for the 0x1A ending here, because
        #   the line offset can start with that value.
        while pos < len(self._data) - 1:
            line = GWBasicLine(self._data, self._encoding, pos)
            line.parse()

            if line.isEOF:
                # Reached the end of the file
                break
            else:
                pos += line.get_consumed_byte_count()
                self._lines.append(line)

    def __str__(self):
        return "\n".join(str(line) for line in self._lines)


#!/usr/bin/env python3
# Convert a binary GW-BASIC program into human-readable ASCII.

import sys
import codecs
import argparse
from gwbasic import GWBasic

if __name__ == '__main__':
    parser = argparse.ArgumentParser(description='Converts binary GW-Basic source files to UTF-8 encoded texts.')
    parser.add_argument('source_file', metavar="SOURCE.BAS", type=str, help="A binary GW-Basic source file to be converted to text")
    parser.add_argument('--encoding', metavar="cp437", type=str, help="The encoding of the source file. Examples: " \
        "cp437 (IBM original, default), cp850 (Latin-1), cp1252 (Windows 1.0 and later), " \
        "iso-8859-1 (Western Europe), and all the others supported by Python.", default="cp437", required=False)
    args = parser.parse_args()

    try:
        codecs.lookup(args.encoding)
    except LookupError:
        raise ValueError("Unknown character encoding: %s" % args.encoding)
    
    with open(args.source_file, 'rb') as f:
        data = f.read()
        program = GWBasic(data, args.encoding)
        program.parse()
        print(program)

